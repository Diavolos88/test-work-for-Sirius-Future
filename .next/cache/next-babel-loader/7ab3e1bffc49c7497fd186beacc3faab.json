{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\salov\\\\Desktop\\\\sirius\\\\components\\\\Graph\\\\Graph.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport s from './graph.module.css';\nimport { Area, AreaChart, CartesianGrid, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\";\nimport React, { useState } from 'react';\nimport { updateFirstAC } from \"../../redux/firstGraphReduser\";\nimport { connect } from 'react-redux';\nexport default function MyGraph({\n  name1,\n  name2,\n  name3,\n  company\n}) {\n  const {\n    asd: setData\n  } = useState([{\n    name: \"сен\",\n    nameHover: \"сентября\",\n    hmValues: 29\n  }]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.field,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      children: name1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: name2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: name3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GraphContainer, {\n      company: company\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"state\", {\n      money: 0,\n      moneyEarly: 0,\n      procent: 0,\n      update: true\n    });\n\n    _defineProperty(this, \"timer\", void 0);\n  }\n\n  createDates(num) {\n    const now = new Date(); // @ts-ignore\n\n    return [...Array(num).keys()];\n  }\n\n  createValues(dates) {\n    let vals = [];\n    dates.map(d => {\n      vals.push({\n        date: d,\n        value: Math.floor(Math.random() * 7)\n      });\n    });\n    return vals;\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        update: !this.state.update\n      }));\n    }, 5000);\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timer);\n  }\n\n  render() {\n    let dates = this.createDates(hmValues).slice(1);\n    let data = this.createValues(dates);\n    let fullMany = 0;\n    data.forEach(e => {\n      fullMany += e.value;\n    });\n    let procentNow = 0;\n\n    if (this.state.moneyEarly) {\n      procentNow = Math.floor((fullMany - this.state.moneyEarly) / fullMany * 100);\n      this.state.procent = procentNow;\n    }\n\n    this.state.moneyEarly = fullMany;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.graphContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: s.upperGraph,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: s.cash,\n          children: [\"\\u0412\\u044B\\u0440\\u0443\\u0447\\u043A\\u0430: \", /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [fullMany, \" 000 \\u0440\\u0443\\u0431.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 59\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: procentNow > 0 ? s.proc + \" \" + s.upper : s.proc + \" \" + s.fallen,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: procentNow > 0 ? s.errow + \" \" + s.upper : s.errow + \" \" + s.fallen,\n                children: \" \\u21AF \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 103\n              }, this), \" \", procentNow, \" %\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 92\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 54\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: this.props.company === \"yandex\" ? s.yandexLogo : s.paypalLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        maxHeight: \"200px\",\n        width: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(AreaChart, {\n          data: data,\n          margin: {\n            top: 20,\n            right: 30,\n            left: 10,\n            bottom: 10\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n            children: /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n              id: \"colorValue\",\n              x1: \"0\",\n              y1: \"0\",\n              x2: \"0\",\n              y2: \"1\",\n              children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n                offset: \"5%\",\n                stopColor: \"#8884d8\",\n                stopOpacity: 0.8\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n                offset: \"95%\",\n                stopColor: \"#8884d8\",\n                stopOpacity: 0.0\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"date\",\n            unit: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            unit: \"\\u0442\\u044B\\u0441. \\u20BD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n            vertical: false,\n            strokeDashArray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            wrapperStyle: {\n              backgroundColor: \"red\"\n            },\n            labelStyle: {\n              color: \"grey\"\n            },\n            itemStyle: {\n              color: \"black\"\n            },\n            formatter: function (value, name) {\n              return `${value} тыс. ₽`;\n            },\n            labelFormatter: function (value) {\n              return `Выручка за ${value} ${nameHover}`;\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Area, {\n            type: \"monotone\",\n            dataKey: \"value\",\n            stroke: \"blue\",\n            fill: \"url(#colorValue)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nlet mapStateToProp = state => {\n  return {\n    update: state.firstGraph.update,\n    moneyEarlyState: state.firstGraph.moneyEarly\n  };\n};\n\nconst GraphContainer = connect(mapStateToProp, {\n  updateFirstAC\n})(Graph);","map":{"version":3,"sources":["C:/Users/salov/Desktop/sirius/components/Graph/Graph.tsx"],"names":["s","Area","AreaChart","CartesianGrid","ResponsiveContainer","Tooltip","XAxis","YAxis","React","useState","updateFirstAC","connect","MyGraph","name1","name2","name3","company","asd","setData","name","nameHover","hmValues","field","Graph","Component","constructor","props","money","moneyEarly","procent","update","createDates","num","now","Date","Array","keys","createValues","dates","vals","map","d","push","date","value","Math","floor","random","componentDidMount","timer","setInterval","setState","state","componentWillUnmount","clearTimeout","render","slice","data","fullMany","forEach","e","procentNow","graphContainer","upperGraph","cash","proc","upper","fallen","errow","yandexLogo","paypalLogo","top","right","left","bottom","backgroundColor","color","mapStateToProp","firstGraph","moneyEarlyState","GraphContainer"],"mappings":"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","sourcesContent":["import s from './graph.module.css'\r\nimport {Area, AreaChart, CartesianGrid, Line, ResponsiveContainer, Tooltip, XAxis, YAxis} from \"recharts\";\r\nimport React, {useState} from 'react'\r\nimport {updateFirstAC} from \"../../redux/firstGraphReduser\";\r\nimport {connect} from 'react-redux';\r\nimport {RootStoreType} from '../../redux/redux';\r\nimport {bool, number} from \"prop-types\";\r\n\r\n\r\ntype MyGraphType = {\r\n    name1: string,\r\n    name2: string,\r\n    name3: string,\r\n    company: string\r\n}\r\n\r\ntype StateType = Array<{\r\n    name: string,\r\n    nameHover: string,\r\n    hmValues: number\r\n}>\r\n\r\nexport default function MyGraph<StateType>({name1, name2, name3, company}: React.PropsWithChildren<MyGraphType>): JSX.Element{\r\n    const {asd: setData} = useState([{\r\n        name: \"сен\",\r\n        nameHover: \"сентября\",\r\n        hmValues: 29\r\n    }])\r\n    return (\r\n        <div className={s.field}>\r\n            <button>{name1}</button>\r\n            <button>{name2}</button>\r\n            <button>{name3}</button>\r\n            <GraphContainer company={company}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface Props {\r\n    company: string;\r\n}\r\n\r\ninterface State {\r\n    money: number,\r\n    moneyEarly: number,\r\n    procent: number,\r\n    update: boolean\r\n}\r\n\r\nclass Graph extends React.Component<Props, State> {\r\n    state = {\r\n        money: 0,\r\n        moneyEarly: 0,\r\n        procent: 0,\r\n        update: true\r\n    }\r\n    timer: any;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    createDates(num: number) {\r\n        const now = new Date();\r\n        // @ts-ignore\r\n        return [...Array(num).keys()];\r\n    }\r\n\r\n    createValues(dates: Array<number>) {\r\n        let vals: Array<{ date: number, value: number }> = [];\r\n        dates.map(d => {\r\n            vals.push({\r\n                date: d,\r\n                value: Math.floor(Math.random() * 7)\r\n            });\r\n        });\r\n\r\n        return vals;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timer = setInterval(() => {\r\n            this.setState({...this.state, update: !this.state.update})\r\n        }, 5000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.timer);\r\n    }\r\n\r\n    render() {\r\n\r\n        let dates = this.createDates(hmValues).slice(1);\r\n        let data = this.createValues(dates);\r\n        let fullMany = 0\r\n        data.forEach((e) => {\r\n            fullMany += e.value\r\n        })\r\n        let procentNow = 0\r\n        if (this.state.moneyEarly) {\r\n            procentNow = Math.floor(((fullMany - this.state.moneyEarly) / fullMany) * 100)\r\n            this.state.procent = procentNow\r\n        }\r\n        this.state.moneyEarly = fullMany\r\n        return (\r\n            <div className={s.graphContainer}>\r\n                <div className={s.upperGraph}>\r\n                    <div className={s.cash}>Выручка: <div><span>{fullMany} 000 руб.</span> <span\r\n                        className={procentNow > 0 ? s.proc + \" \" + s.upper : s.proc + \" \" + s.fallen}><span\r\n                        className={procentNow > 0 ? s.errow + \" \" + s.upper : s.errow + \" \" + s.fallen}> ↯ </span> {procentNow} %</span>\r\n                    </div></div>\r\n                    <div className={this.props.company === \"yandex\" ? s.yandexLogo : s.paypalLogo}/>\r\n                </div>\r\n\r\n                <ResponsiveContainer maxHeight={\"200px\"} width=\"100%\">\r\n                    <AreaChart\r\n                        data={data}\r\n                        margin={{top: 20, right: 30, left: 10, bottom: 10}}\r\n                    >\r\n                        <defs>\r\n                            <linearGradient id=\"colorValue\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8}/>\r\n                                <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0.0}/>\r\n                            </linearGradient>\r\n                        </defs>\r\n                        <XAxis dataKey=\"date\" unit={name}/>\r\n                        <YAxis unit='тыс. ₽'/>\r\n                        <CartesianGrid vertical={false} strokeDashArray=\"3 3\"/>\r\n                        <Tooltip\r\n                            wrapperStyle={{backgroundColor: \"red\"}}\r\n                            labelStyle={{color: \"grey\"}}\r\n                            itemStyle={{color: \"black\"}}\r\n                            formatter={function (value, name) {\r\n                                return `${value} тыс. ₽`;\r\n                            }}\r\n                            labelFormatter={function (value) {\r\n                                return `Выручка за ${value} ${nameHover}`;\r\n                            }}\r\n                        />\r\n                        <Area\r\n                            type=\"monotone\"\r\n                            dataKey=\"value\"\r\n                            stroke=\"blue\"\r\n                            fill=\"url(#colorValue)\"\r\n                        />\r\n                    </AreaChart>\r\n                </ResponsiveContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProp = (state: RootStoreType): { update: boolean, moneyEarlyState: number } => {\r\n    return {\r\n        update: state.firstGraph.update,\r\n        moneyEarlyState: state.firstGraph.moneyEarly\r\n    }\r\n}\r\n\r\nconst GraphContainer = connect(mapStateToProp, {updateFirstAC})(Graph)\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport s from './graph.module.css';\nimport { Area, AreaChart, CartesianGrid, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\";\nimport React from 'react';\nimport { updateFirstAC } from \"../../redux/firstGraphReduser\";\nimport { connect } from 'react-redux';\nexport default function MyGraph({\n  name1,\n  name2,\n  name3,\n  company\n}) {\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: s.field,\n    children: [/*#__PURE__*/_jsx(\"button\", {\n      children: name1\n    }), /*#__PURE__*/_jsx(\"button\", {\n      children: name2\n    }), /*#__PURE__*/_jsx(\"button\", {\n      children: name3\n    }), /*#__PURE__*/_jsx(GraphContainer, {\n      company: company\n    })]\n  });\n}\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"state\", {\n      money: 0,\n      moneyEarly: 0,\n      procent: 0,\n      update: true\n    });\n\n    _defineProperty(this, \"timer\", void 0);\n  }\n\n  createDates() {\n    const now = new Date(); // @ts-ignore\n\n    return [...Array(now.getDate() + 1).keys()];\n  }\n\n  createValues(dates) {\n    let vals = [];\n    dates.map(d => {\n      vals.push({\n        date: d,\n        value: Math.floor(Math.random() * 7)\n      });\n    });\n    return vals;\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        update: !this.state.update\n      }));\n    }, 5000);\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timer);\n  }\n\n  render() {\n    let dates = this.createDates().slice(1);\n    let data = this.createValues(dates);\n    let fullMany = 0;\n    data.forEach(e => {\n      fullMany += e.value;\n    });\n    let procentNow = 0;\n\n    if (this.state.moneyEarly) {\n      procentNow = Math.floor((fullMany - this.state.moneyEarly) / fullMany * 100);\n      this.state.procent = procentNow;\n    }\n\n    this.state.moneyEarly = fullMany;\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: s.graphContainer,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: s.upperGraph,\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: s.cash,\n          children: [\"\\u0412\\u044B\\u0440\\u0443\\u0447\\u043A\\u0430: \", /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsxs(\"span\", {\n              children: [fullMany, \" 000 \\u0440\\u0443\\u0431.\"]\n            }), \" \", /*#__PURE__*/_jsxs(\"span\", {\n              className: procentNow > 0 ? s.proc + \" \" + s.upper : s.proc + \" \" + s.fallen,\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                className: procentNow > 0 ? s.errow + \" \" + s.upper : s.errow + \" \" + s.fallen,\n                children: \" \\u21AF \"\n              }), \" \", procentNow, \" %\"]\n            })]\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: this.props.company === \"yandex\" ? s.yandexLogo : s.paypalLogo\n        })]\n      }), /*#__PURE__*/_jsx(ResponsiveContainer, {\n        maxHeight: \"200px\",\n        width: \"100%\",\n        children: /*#__PURE__*/_jsxs(AreaChart, {\n          data: data,\n          margin: {\n            top: 20,\n            right: 30,\n            left: 10,\n            bottom: 10\n          },\n          children: [/*#__PURE__*/_jsx(\"defs\", {\n            children: /*#__PURE__*/_jsxs(\"linearGradient\", {\n              id: \"colorValue\",\n              x1: \"0\",\n              y1: \"0\",\n              x2: \"0\",\n              y2: \"1\",\n              children: [/*#__PURE__*/_jsx(\"stop\", {\n                offset: \"5%\",\n                stopColor: \"#8884d8\",\n                stopOpacity: 0.8\n              }), /*#__PURE__*/_jsx(\"stop\", {\n                offset: \"95%\",\n                stopColor: \"#8884d8\",\n                stopOpacity: 0.0\n              })]\n            })\n          }), /*#__PURE__*/_jsx(XAxis, {\n            dataKey: \"date\",\n            unit: \"\\u0441\\u0435\\u043D\"\n          }), /*#__PURE__*/_jsx(YAxis, {\n            unit: \"\\u0442\\u044B\\u0441. \\u20BD\"\n          }), /*#__PURE__*/_jsx(CartesianGrid, {\n            vertical: false,\n            strokeDashArray: \"3 3\"\n          }), /*#__PURE__*/_jsx(Tooltip, {\n            wrapperStyle: {\n              backgroundColor: \"red\"\n            },\n            labelStyle: {\n              color: \"grey\"\n            },\n            itemStyle: {\n              color: \"black\"\n            },\n            formatter: function (value, name) {\n              return `${value} тыс. ₽`;\n            },\n            labelFormatter: function (value) {\n              return `Выручка за ${value} сентября`;\n            }\n          }), /*#__PURE__*/_jsx(Area, {\n            type: \"monotone\",\n            dataKey: \"value\",\n            stroke: \"blue\",\n            fill: \"url(#colorValue)\"\n          })]\n        })\n      })]\n    });\n  }\n\n}\n\nlet mapStateToProp = state => {\n  return {\n    update: state.firstGraph.update,\n    moneyEarlyState: state.firstGraph.moneyEarly\n  };\n};\n\nconst GraphContainer = connect(mapStateToProp, {\n  updateFirstAC\n})(Graph);","map":null,"metadata":{},"sourceType":"module"}